// Generated by CoffeeScript 1.3.3
(function() {
  var Connection, Db, ObjectID, Server, dbName, hash, withCollection;

  hash = require("./pass").hash;

  Db = require("mongodb").Db;

  Connection = require("mongodb").Connection;

  Server = require("mongodb").Server;

  ObjectID = require("mongodb").ObjectID;

  dbName = "fleague";

  withCollection = function(colName, fn) {
    return Db.connect("mongodb://localhost/" + dbName, function(err, db) {
      return db.collection(colName, function(err, collection) {
        return fn(collection);
      });
    });
  };

  exports.createLeague = function(league, callback) {
    return withCollection("leagues", function(coll) {
      return coll.findOne({
        email: league.email
      }, function(err, doc) {
        if (err) {
          return callback(err);
        } else if (doc) {
          return callback("Sorry, a league is already registered for the given email address!");
        } else {
          console.log("CREATE LEAGUE " + league.name);
          return hash(league.password, function(err, salt, hash) {
            if (err) {
              throw err;
            }
            league.hash = hash;
            league.salt = salt;
            league.created = new Date();
            league.last_login = null;
            league.login_count = 0;
            delete league.password;
            return coll.insert(league, function(err, doc) {
              return callback(err);
            });
          });
        }
      });
    });
  };

  exports.authenticate = function(email, pass, fn) {
    return withCollection("leagues", function(coll) {
      return coll.findOne({
        email: email
      }, function(err, league) {
        if (err) {
          return fn(err);
        }
        if (!league) {
          return fn("No league found for that email address");
        }
        return hash(pass, league.salt, function(err, hash) {
          if (err) {
            return fn(err);
          }
          if (hash === league.hash) {
            return fn(null, league);
          }
          return fn("Invalid password");
        });
      });
    });
  };

  exports.loadLeague = function(id, fn) {
    return withCollection("leagues", function(coll) {
      return coll.findOne({
        _id: new ObjectID(id)
      }, function(err, league) {
        if (err) {
          return fn(err);
        }
        if (!league) {
          return fn("404");
        }
        return fn(null, league);
      });
    });
  };

}).call(this);
